import wollok.game.*
import pepita.*
import comidas.*
import extras.*

describe "Tests de Pepita" {
	
	method initialize() {
		// El game no se reinicia en cada test: https://github.com/uqbar-project/wollok/issues/1896
		game.clear()
		game.addVisual(pepita)
	}

	test "Al comer pepita aumenta su energia" {
		pepita.come(new Manzana())
		assert.equals(140, pepita.energia())
	}

	test "Al volar pepita pierde energia" {
		pepita.vola(1)
		assert.equals(91, pepita.energia())
	}

	test "Al volar mucho pepita queda cansada" {
		pepita.vola(100)
		assert.that(pepita.estaCansada())
	}

	test "Al moverse pepita pierde energia por el trayecto" {
		pepita.irA(game.at(1, 0))
		assert.equals(91, pepita.energia())
	}

	test "Al moverse pepita queda en la nueva posicion" {
		const nuevaPosicion = game.at(1, 1)
		pepita.irA(nuevaPosicion)
		assert.equals(nuevaPosicion, pepita.position())
	}

	test "Al estar en la misma posicion que el nido pepita crece" {
		pepita.irA(nido.position())
		assert.equals("pepita-grande.png", pepita.image())
	}
	
	test "Al estar en la misma posicion que silvestre pepita se pone gris" {
		pepita.irA(silvestre.position())
		assert.equals("pepita-gris.png", pepita.image())
	}

}

describe "Silvestre" {
	
	test "Se encuentra siempre debajo de pepita" {
		pepita.irA(game.at(5, 5))
		assert.equals(game.at(5, 0), silvestre.position())
	}
	
	test "Tiene un m√≠nimo en x" {
		pepita.irA(game.origin())
		assert.equals(game.at(3, 0), silvestre.position())
	}
	
//	only test "manzanas con 2 new" {
//		const manzana1 = new Manzana()
//		const manzana2 = new Manzana()
//		const miSet = #{manzana1, manzana2}
//		assert.equals(manzana1, manzana2)
//	}
//	
//	 test "manzanas con 1 new" {
//		const manzana1 = new Manzana()
//		const manzana2 = manzana1
//		const miSet = #{manzana1, manzana2}
//		assert.equals(manzana1, manzana2)
//	}
	
	
}